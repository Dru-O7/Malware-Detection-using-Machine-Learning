import pandas as pd
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.feature_selection import SelectFromModel
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingClassifier
from sklearn import metrics
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

MalData = pd.read_csv("MalwareData.csv", sep="|")
legit = MalData[0:41323].drop(["legitimate"], axis=1)
mal = MalData[41323::].drop(["legitimate"], axis=1)
print(legit.shape[0], legit.shape[1])
print(mal.shape[0], mal.shape[1])
print(mal.columns)

data_in = MalData.drop(['Name', 'md5', 'legitimate'], axis=1).values
labels = MalData['legitimate'].values
extratrees = ExtraTreesClassifier().fit(data_in, labels)
select = SelectFromModel(extratrees, prefit=True)
data_in_new = select.transform(data_in)
print(data_in.shape, data_in_new.shape)

features = data_in_new.shape[1]
importances = extratrees.feature_importances_
indices = np.argsort(importances)[::-1]

for i in range(features):
    print("%d" % (i + 1), MalData.columns[2 + indices[i]], importances[indices[i]])

legit_train, legit_test, mal_train, mal_test = train_test_split(data_in_new, labels, test_size=0.2, random_state=42)

classif = RandomForestClassifier(bootstrap=False, criterion="gini", max_features=0.25, min_samples_leaf=1, min_samples_split=6, n_estimators=100)

classif.fit((legit_train), (mal_train))
print("The Score of the Algorithm:", classif.score(legit_test, mal_test) * 100)
result = classif.predict(legit_test)
conf_mat = confusion_matrix(mal_test, result)

# Create a heatmap of the confusion matrix with labels
plt.figure(figsize=(8, 6))
sns.heatmap(conf_mat, annot=True, fmt="d", cmap="Blues", cbar=False)
plt.xlabel("Predicted Labels")
plt.ylabel("True Labels")
plt.title("Confusion Matrix")
plt.show()
